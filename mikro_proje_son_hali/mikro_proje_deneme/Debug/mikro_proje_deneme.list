
mikro_proje_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005804  08005804  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800580c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000001c  08005828  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005828  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f10e  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b5  00000000  00000000  0002f19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  00032528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023591  00000000  00000000  0003318e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d76  00000000  00000000  0005671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddbba  00000000  00000000  00069495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044a4  00000000  00000000  00147050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005748 	.word	0x08005748

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08005748 	.word	0x08005748

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295
 8000a54:	f000 b970 	b.w	8000d38 <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9e08      	ldr	r6, [sp, #32]
 8000a76:	460d      	mov	r5, r1
 8000a78:	4604      	mov	r4, r0
 8000a7a:	460f      	mov	r7, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14a      	bne.n	8000b16 <__udivmoddi4+0xa6>
 8000a80:	428a      	cmp	r2, r1
 8000a82:	4694      	mov	ip, r2
 8000a84:	d965      	bls.n	8000b52 <__udivmoddi4+0xe2>
 8000a86:	fab2 f382 	clz	r3, r2
 8000a8a:	b143      	cbz	r3, 8000a9e <__udivmoddi4+0x2e>
 8000a8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a90:	f1c3 0220 	rsb	r2, r3, #32
 8000a94:	409f      	lsls	r7, r3
 8000a96:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	409c      	lsls	r4, r3
 8000a9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa2:	fa1f f58c 	uxth.w	r5, ip
 8000aa6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aaa:	0c22      	lsrs	r2, r4, #16
 8000aac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab4:	fb01 f005 	mul.w	r0, r1, r5
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x62>
 8000abc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ac4:	f080 811c 	bcs.w	8000d00 <__udivmoddi4+0x290>
 8000ac8:	4290      	cmp	r0, r2
 8000aca:	f240 8119 	bls.w	8000d00 <__udivmoddi4+0x290>
 8000ace:	3902      	subs	r1, #2
 8000ad0:	4462      	add	r2, ip
 8000ad2:	1a12      	subs	r2, r2, r0
 8000ad4:	b2a4      	uxth	r4, r4
 8000ad6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ada:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ade:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae2:	fb00 f505 	mul.w	r5, r0, r5
 8000ae6:	42a5      	cmp	r5, r4
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x90>
 8000aea:	eb1c 0404 	adds.w	r4, ip, r4
 8000aee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x294>
 8000af6:	42a5      	cmp	r5, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x294>
 8000afc:	4464      	add	r4, ip
 8000afe:	3802      	subs	r0, #2
 8000b00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b04:	1b64      	subs	r4, r4, r5
 8000b06:	2100      	movs	r1, #0
 8000b08:	b11e      	cbz	r6, 8000b12 <__udivmoddi4+0xa2>
 8000b0a:	40dc      	lsrs	r4, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0xbc>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f000 80ed 	beq.w	8000cfa <__udivmoddi4+0x28a>
 8000b20:	2100      	movs	r1, #0
 8000b22:	e9c6 0500 	strd	r0, r5, [r6]
 8000b26:	4608      	mov	r0, r1
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	fab3 f183 	clz	r1, r3
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d149      	bne.n	8000bc8 <__udivmoddi4+0x158>
 8000b34:	42ab      	cmp	r3, r5
 8000b36:	d302      	bcc.n	8000b3e <__udivmoddi4+0xce>
 8000b38:	4282      	cmp	r2, r0
 8000b3a:	f200 80f8 	bhi.w	8000d2e <__udivmoddi4+0x2be>
 8000b3e:	1a84      	subs	r4, r0, r2
 8000b40:	eb65 0203 	sbc.w	r2, r5, r3
 8000b44:	2001      	movs	r0, #1
 8000b46:	4617      	mov	r7, r2
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d0e2      	beq.n	8000b12 <__udivmoddi4+0xa2>
 8000b4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000b50:	e7df      	b.n	8000b12 <__udivmoddi4+0xa2>
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xe6>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f382 	clz	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x210>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b70:	fb07 2015 	mls	r0, r7, r5, r2
 8000b74:	0c22      	lsrs	r2, r4, #16
 8000b76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7a:	fb0e f005 	mul.w	r0, lr, r5
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x124>
 8000b82:	eb1c 0202 	adds.w	r2, ip, r2
 8000b86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x122>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f200 80cb 	bhi.w	8000d28 <__udivmoddi4+0x2b8>
 8000b92:	4645      	mov	r5, r8
 8000b94:	1a12      	subs	r2, r2, r0
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x14e>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	d202      	bcs.n	8000bbc <__udivmoddi4+0x14c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f200 80bb 	bhi.w	8000d32 <__udivmoddi4+0x2c2>
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	eba4 040e 	sub.w	r4, r4, lr
 8000bc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bc6:	e79f      	b.n	8000b08 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0720 	rsb	r7, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000bda:	fa20 f307 	lsr.w	r3, r0, r7
 8000bde:	40fd      	lsrs	r5, r7
 8000be0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000bfc:	42a5      	cmp	r5, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	fa00 f001 	lsl.w	r0, r0, r1
 8000c06:	d90b      	bls.n	8000c20 <__udivmoddi4+0x1b0>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c10:	f080 8088 	bcs.w	8000d24 <__udivmoddi4+0x2b4>
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	f240 8085 	bls.w	8000d24 <__udivmoddi4+0x2b4>
 8000c1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1e:	4464      	add	r4, ip
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	b29d      	uxth	r5, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1da>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c40:	d26c      	bcs.n	8000d1c <__udivmoddi4+0x2ac>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	d96a      	bls.n	8000d1c <__udivmoddi4+0x2ac>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	42ac      	cmp	r4, r5
 8000c58:	46c8      	mov	r8, r9
 8000c5a:	46ae      	mov	lr, r5
 8000c5c:	d356      	bcc.n	8000d0c <__udivmoddi4+0x29c>
 8000c5e:	d053      	beq.n	8000d08 <__udivmoddi4+0x298>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x208>
 8000c62:	ebb0 0208 	subs.w	r2, r0, r8
 8000c66:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40ca      	lsrs	r2, r1
 8000c70:	40cc      	lsrs	r4, r1
 8000c72:	4317      	orrs	r7, r2
 8000c74:	e9c6 7400 	strd	r7, r4, [r6]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	f1c3 0120 	rsb	r1, r3, #32
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	fa20 f201 	lsr.w	r2, r0, r1
 8000c8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000c90:	409d      	lsls	r5, r3
 8000c92:	432a      	orrs	r2, r5
 8000c94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca4:	0c11      	lsrs	r1, r2, #16
 8000ca6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000caa:	fb00 f50e 	mul.w	r5, r0, lr
 8000cae:	428d      	cmp	r5, r1
 8000cb0:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x258>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cbe:	d22f      	bcs.n	8000d20 <__udivmoddi4+0x2b0>
 8000cc0:	428d      	cmp	r5, r1
 8000cc2:	d92d      	bls.n	8000d20 <__udivmoddi4+0x2b0>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	1b49      	subs	r1, r1, r5
 8000cca:	b292      	uxth	r2, r2
 8000ccc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000cdc:	4291      	cmp	r1, r2
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x282>
 8000ce0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce8:	d216      	bcs.n	8000d18 <__udivmoddi4+0x2a8>
 8000cea:	4291      	cmp	r1, r2
 8000cec:	d914      	bls.n	8000d18 <__udivmoddi4+0x2a8>
 8000cee:	3d02      	subs	r5, #2
 8000cf0:	4462      	add	r2, ip
 8000cf2:	1a52      	subs	r2, r2, r1
 8000cf4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cf8:	e738      	b.n	8000b6c <__udivmoddi4+0xfc>
 8000cfa:	4631      	mov	r1, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xa2>
 8000d00:	4639      	mov	r1, r7
 8000d02:	e6e6      	b.n	8000ad2 <__udivmoddi4+0x62>
 8000d04:	4610      	mov	r0, r2
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x90>
 8000d08:	4548      	cmp	r0, r9
 8000d0a:	d2a9      	bcs.n	8000c60 <__udivmoddi4+0x1f0>
 8000d0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d14:	3b01      	subs	r3, #1
 8000d16:	e7a3      	b.n	8000c60 <__udivmoddi4+0x1f0>
 8000d18:	4645      	mov	r5, r8
 8000d1a:	e7ea      	b.n	8000cf2 <__udivmoddi4+0x282>
 8000d1c:	462b      	mov	r3, r5
 8000d1e:	e794      	b.n	8000c4a <__udivmoddi4+0x1da>
 8000d20:	4640      	mov	r0, r8
 8000d22:	e7d1      	b.n	8000cc8 <__udivmoddi4+0x258>
 8000d24:	46d0      	mov	r8, sl
 8000d26:	e77b      	b.n	8000c20 <__udivmoddi4+0x1b0>
 8000d28:	3d02      	subs	r5, #2
 8000d2a:	4462      	add	r2, ip
 8000d2c:	e732      	b.n	8000b94 <__udivmoddi4+0x124>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e70a      	b.n	8000b48 <__udivmoddi4+0xd8>
 8000d32:	4464      	add	r4, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e742      	b.n	8000bbe <__udivmoddi4+0x14e>

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d46:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <HD44780_Init+0xec>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <HD44780_Init+0xf0>)
 8000d4e:	2208      	movs	r2, #8
 8000d50:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <HD44780_Init+0xf4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HD44780_Init+0xec>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d907      	bls.n	8000d70 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HD44780_Init+0xf4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <HD44780_Init+0xf4>)
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e006      	b.n	8000d7e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HD44780_Init+0xf4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HD44780_Init+0xf4>)
 8000d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d7e:	f000 f985 	bl	800108c <DelayInit>
  HAL_Delay(50);
 8000d82:	2032      	movs	r0, #50	; 0x32
 8000d84:	f001 fb5a 	bl	800243c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <HD44780_Init+0xf0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f943 	bl	8001018 <ExpanderWrite>
  HAL_Delay(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f001 fb51 	bl	800243c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d9a:	2030      	movs	r0, #48	; 0x30
 8000d9c:	f000 f92b 	bl	8000ff6 <Write4Bits>
  DelayUS(4500);
 8000da0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000da4:	f000 f99c 	bl	80010e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000da8:	2030      	movs	r0, #48	; 0x30
 8000daa:	f000 f924 	bl	8000ff6 <Write4Bits>
  DelayUS(4500);
 8000dae:	f241 1094 	movw	r0, #4500	; 0x1194
 8000db2:	f000 f995 	bl	80010e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000db6:	2030      	movs	r0, #48	; 0x30
 8000db8:	f000 f91d 	bl	8000ff6 <Write4Bits>
  DelayUS(4500);
 8000dbc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000dc0:	f000 f98e 	bl	80010e0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000dc4:	2020      	movs	r0, #32
 8000dc6:	f000 f916 	bl	8000ff6 <Write4Bits>
  DelayUS(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 f988 	bl	80010e0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HD44780_Init+0xf4>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f8ce 	bl	8000f7c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HD44780_Init+0xf8>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000de6:	f000 f875 	bl	8000ed4 <HD44780_Display>
  HD44780_Clear();
 8000dea:	f000 f82b 	bl	8000e44 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HD44780_Init+0xfc>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HD44780_Init+0xfc>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f8bc 	bl	8000f7c <SendCommand>
  DelayUS(4500);
 8000e04:	f241 1094 	movw	r0, #4500	; 0x1194
 8000e08:	f000 f96a 	bl	80010e0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000e0c:	490b      	ldr	r1, [pc, #44]	; (8000e3c <HD44780_Init+0x100>)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f876 	bl	8000f00 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000e14:	490a      	ldr	r1, [pc, #40]	; (8000e40 <HD44780_Init+0x104>)
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 f872 	bl	8000f00 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e1c:	f000 f81d 	bl	8000e5a <HD44780_Home>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000003b 	.word	0x2000003b
 8000e2c:	2000003c 	.word	0x2000003c
 8000e30:	20000038 	.word	0x20000038
 8000e34:	20000039 	.word	0x20000039
 8000e38:	2000003a 	.word	0x2000003a
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008

08000e44 <HD44780_Clear>:

void HD44780_Clear()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 f897 	bl	8000f7c <SendCommand>
  DelayUS(2000);
 8000e4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e52:	f000 f945 	bl	80010e0 <DelayUS>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HD44780_Home>:

void HD44780_Home()
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 f88c 	bl	8000f7c <SendCommand>
  DelayUS(2000);
 8000e64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e68:	f000 f93a 	bl	80010e0 <DelayUS>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HD44780_SetCursor+0x5c>)
 8000e82:	f107 0408 	add.w	r4, r7, #8
 8000e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HD44780_SetCursor+0x60>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	79ba      	ldrb	r2, [r7, #6]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d303      	bcc.n	8000e9e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HD44780_SetCursor+0x60>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	3318      	adds	r3, #24
 8000ea4:	443b      	add	r3, r7
 8000ea6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f85d 	bl	8000f7c <SendCommand>
}
 8000ec2:	bf00      	nop
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08005760 	.word	0x08005760
 8000ed0:	2000003b 	.word	0x2000003b

08000ed4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HD44780_Display+0x28>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HD44780_Display+0x28>)
 8000ee4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HD44780_Display+0x28>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f843 	bl	8000f7c <SendCommand>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000039 	.word	0x20000039

08000f00 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f82a 	bl	8000f7c <SendCommand>
  for (int i=0; i<8; i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e009      	b.n	8000f42 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f82e 	bl	8000f98 <SendChar>
  for (int i=0; i<8; i++)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	ddf2      	ble.n	8000f2e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f5a:	e006      	b.n	8000f6a <HD44780_PrintStr+0x18>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f817 	bl	8000f98 <SendChar>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f4      	bne.n	8000f5c <HD44780_PrintStr+0xa>
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f812 	bl	8000fb4 <Send>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f804 	bl	8000fb4 <Send>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f023 030f 	bic.w	r3, r3, #15
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f80b 	bl	8000ff6 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000fe0:	7bba      	ldrb	r2, [r7, #14]
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f804 	bl	8000ff6 <Write4Bits>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f808 	bl	8001018 <ExpanderWrite>
  PulseEnable(value);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f820 	bl	8001050 <PulseEnable>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <ExpanderWrite+0x30>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4313      	orrs	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800102e:	f107 020f 	add.w	r2, r7, #15
 8001032:	230a      	movs	r3, #10
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	214e      	movs	r1, #78	; 0x4e
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <ExpanderWrite+0x34>)
 800103c:	f002 fb62 	bl	8003704 <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000003c 	.word	0x2000003c
 800104c:	200000f8 	.word	0x200000f8

08001050 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffd8 	bl	8001018 <ExpanderWrite>
  DelayUS(20);
 8001068:	2014      	movs	r0, #20
 800106a:	f000 f839 	bl	80010e0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffce 	bl	8001018 <ExpanderWrite>
  DelayUS(20);
 800107c:	2014      	movs	r0, #20
 800107e:	f000 f82f 	bl	80010e0 <DelayUS>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <DelayInit>:

static void DelayInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <DelayInit+0x4c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <DelayInit+0x4c>)
 8001096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800109a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <DelayInit+0x4c>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <DelayInit+0x4c>)
 80010a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <DelayInit+0x50>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <DelayInit+0x50>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <DelayInit+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <DelayInit+0x50>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <DelayInit+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80010c6:	bf00      	nop
  __ASM volatile ("NOP");
 80010c8:	bf00      	nop
  __ASM volatile ("NOP");
 80010ca:	bf00      	nop
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000edf0 	.word	0xe000edf0
 80010dc:	e0001000 	.word	0xe0001000

080010e0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <DelayUS+0x44>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <DelayUS+0x48>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9a      	lsrs	r2, r3, #18
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <DelayUS+0x4c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <DelayUS+0x4c>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f6      	bhi.n	8001102 <DelayUS+0x22>
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000010 	.word	0x20000010
 8001128:	431bde83 	.word	0x431bde83
 800112c:	e0001000 	.word	0xe0001000

08001130 <HAL_ADC_ConvCpltCallback>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc2){ //Su sensörü için.
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
waterValue= HAL_ADC_GetValue(hadc2);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 fc54 	bl	80029e6 <HAL_ADC_GetValue>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_ADC_ConvCpltCallback+0x34>)
 8001144:	801a      	strh	r2, [r3, #0]
	if(waterValue>150){
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_ADC_ConvCpltCallback+0x34>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	2b96      	cmp	r3, #150	; 0x96
 800114c:	d903      	bls.n	8001156 <HAL_ADC_ConvCpltCallback+0x26>
		waterFlag=1;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_ADC_ConvCpltCallback+0x38>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
	}else{
		waterFlag=0;
	}
}
 8001154:	e002      	b.n	800115c <HAL_ADC_ConvCpltCallback+0x2c>
		waterFlag=0;
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_ADC_ConvCpltCallback+0x38>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000005e 	.word	0x2000005e
 8001168:	20000062 	.word	0x20000062

0800116c <kilitFonksiyonu>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kilitFonksiyonu(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)){ //kitle tusu
 8001170:	2120      	movs	r1, #32
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <kilitFonksiyonu+0x2c>)
 8001174:	f002 f936 	bl	80033e4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <kilitFonksiyonu+0x20>
			kilitliMi=1;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <kilitFonksiyonu+0x30>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
			mesafeFlag=0;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <kilitFonksiyonu+0x34>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		}
		else{ //5 sifir iken açilacak
			kilitliMi=0;
		}
}
 800118a:	e002      	b.n	8001192 <kilitFonksiyonu+0x26>
			kilitliMi=0;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <kilitFonksiyonu+0x30>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000
 800119c:	20000066 	.word	0x20000066
 80011a0:	20000065 	.word	0x20000065

080011a4 <perdeAc>:

void perdeAc(){
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	TIM2->CCR2=SERVO_ANGLE_0;
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
} //manuel açma kapamalar için.
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <perdeKapa>:

void perdeKapa(){
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	 TIM2->CCR2=SERVO_ANGLE_180;
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	f240 5213 	movw	r2, #1299	; 0x513
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <Gas_System>:
void Gas_System(){ //Pir sensörü gelince kapinin kendine ait kontrolu olacak.
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
    GPIO_PinState digital_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); // Dijital degeri oku
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	482e      	ldr	r0, [pc, #184]	; (8001298 <Gas_System+0xc4>)
 80011e0:	f002 f900 	bl	80033e4 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	70fb      	strb	r3, [r7, #3]
    // Dijital degeri kontrol et
    if (digital_value == 0) // Eger dijital pin HIGH durumdaysa
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d131      	bne.n	8001252 <Gas_System+0x7e>
    {
				gasFlag=1;
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <Gas_System+0xc8>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
				TIM2->CCR1=SERVO_ANGLE_90;
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
				  HD44780_Clear();
 80011fe:	f7ff fe21 	bl	8000e44 <HD44780_Clear>
				  HD44780_SetCursor(0,0);
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fe33 	bl	8000e70 <HD44780_SetCursor>
				  HD44780_PrintStr("GAZ KACAGI VAR");
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <Gas_System+0xcc>)
 800120c:	f7ff fea1 	bl	8000f52 <HD44780_PrintStr>
				  HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001214:	f001 f912 	bl	800243c <HAL_Delay>
				  TIM2->CCR2=SERVO_ANGLE_90;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
           // Servo motoru 90 dereceye döndür
        // LED'i yak
        for (int i = 0; i < 40; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e010      	b.n	800124a <Gas_System+0x76>
        {

        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2102      	movs	r1, #2
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <Gas_System+0xd0>)
 800122e:	f002 f8f1 	bl	8003414 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6); // ACIL DURUM LED 1'i yak , Buzzer'i aç. , ACIL DURUM LED 2'i yak
 8001232:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <Gas_System+0xd0>)
 8001238:	f002 f905 	bl	8003446 <HAL_GPIO_TogglePin>
            HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001240:	f001 f8fc 	bl	800243c <HAL_Delay>
        for (int i = 0; i < 40; i++)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b27      	cmp	r3, #39	; 0x27
 800124e:	ddeb      	ble.n	8001228 <Gas_System+0x54>
        TIM2->CCR1=SERVO_ANGLE_0; // Servo motoru 0 dereceye döndür
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // ACIL DURUM LED1'i söndür
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); // ACIL DURUM LED2'i söndür
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);// Buzzer'i kapat
    }
}
 8001250:	e01d      	b.n	800128e <Gas_System+0xba>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	2102      	movs	r1, #2
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <Gas_System+0xd0>)
 8001258:	f002 f8dc 	bl	8003414 <HAL_GPIO_WritePin>
				gasFlag=0;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <Gas_System+0xc8>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
        TIM2->CCR1=SERVO_ANGLE_0; // Servo motoru 0 dereceye döndür
 8001262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // ACIL DURUM LED1'i söndür
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <Gas_System+0xd0>)
 8001274:	f002 f8ce 	bl	8003414 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); // ACIL DURUM LED2'i söndür
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <Gas_System+0xd0>)
 8001280:	f002 f8c8 	bl	8003414 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);// Buzzer'i kapat
 8001284:	2200      	movs	r2, #0
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <Gas_System+0xd0>)
 800128a:	f002 f8c3 	bl	8003414 <HAL_GPIO_WritePin>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020000 	.word	0x40020000
 800129c:	20000063 	.word	0x20000063
 80012a0:	08005770 	.word	0x08005770
 80012a4:	40020800 	.word	0x40020800

080012a8 <isikKontrol>:

void isikKontrol(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc1);
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <isikKontrol+0x40>)
 80012ae:	f001 f92d 	bl	800250c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100); //LDR okudugu veri bozulmasin diye eoc flag kontrolü yapiyoruz.
 80012b2:	2164      	movs	r1, #100	; 0x64
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <isikKontrol+0x40>)
 80012b6:	f001 f9fb 	bl	80026b0 <HAL_ADC_PollForConversion>
    lightValue = HAL_ADC_GetValue(&hadc1);
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <isikKontrol+0x40>)
 80012bc:	f001 fb93 	bl	80029e6 <HAL_ADC_GetValue>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <isikKontrol+0x44>)
 80012c6:	801a      	strh	r2, [r3, #0]

		if(lightValue<1500){ //ara deger bulanacak!
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <isikKontrol+0x44>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	f240 52db 	movw	r2, #1499	; 0x5db
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d803      	bhi.n	80012dc <isikKontrol+0x34>
			ldrFlag=0;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <isikKontrol+0x48>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
		}
		else{
			ldrFlag=1;
		}
}
 80012da:	e002      	b.n	80012e2 <isikKontrol+0x3a>
			ldrFlag=1;
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <isikKontrol+0x48>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000068 	.word	0x20000068
 80012ec:	20000060 	.word	0x20000060
 80012f0:	20000064 	.word	0x20000064

080012f4 <perdeKontrol>:

void perdeKontrol(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if(gasFlag==1){ //gaz varsa her türlü açicak.
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <perdeKontrol+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d102      	bne.n	8001306 <perdeKontrol+0x12>

		perdeAc();
 8001300:	f7ff ff50 	bl	80011a4 <perdeAc>
		  HD44780_PrintStr("HAVA KAPALI");
		  HAL_Delay(100);
		perdeAc(); //ne gaz varsa ne dis mekan daha isikli ise perde açilacak.

	}
}
 8001304:	e020      	b.n	8001348 <perdeKontrol+0x54>
	else if (ldrFlag==1){ //gaz yoksa dis mekandan daha fazla isik varsa kapanacak
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <perdeKontrol+0x5c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10e      	bne.n	800132c <perdeKontrol+0x38>
		  HD44780_Clear();
 800130e:	f7ff fd99 	bl	8000e44 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fdab 	bl	8000e70 <HD44780_SetCursor>
		  HD44780_PrintStr("HAVA GUNESLI");
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <perdeKontrol+0x60>)
 800131c:	f7ff fe19 	bl	8000f52 <HD44780_PrintStr>
		 HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f001 f88b 	bl	800243c <HAL_Delay>
		perdeKapa();
 8001326:	f7ff ff49 	bl	80011bc <perdeKapa>
}
 800132a:	e00d      	b.n	8001348 <perdeKontrol+0x54>
		  HD44780_Clear();
 800132c:	f7ff fd8a 	bl	8000e44 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8001330:	2100      	movs	r1, #0
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fd9c 	bl	8000e70 <HD44780_SetCursor>
		  HD44780_PrintStr("HAVA KAPALI");
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <perdeKontrol+0x64>)
 800133a:	f7ff fe0a 	bl	8000f52 <HD44780_PrintStr>
		  HAL_Delay(100);
 800133e:	2064      	movs	r0, #100	; 0x64
 8001340:	f001 f87c 	bl	800243c <HAL_Delay>
		perdeAc(); //ne gaz varsa ne dis mekan daha isikli ise perde açilacak.
 8001344:	f7ff ff2e 	bl	80011a4 <perdeAc>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000063 	.word	0x20000063
 8001350:	20000064 	.word	0x20000064
 8001354:	08005780 	.word	0x08005780
 8001358:	08005790 	.word	0x08005790

0800135c <kapiKontrol>:
			pirFlag=1;
		}

	}*/

void kapiKontrol(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	 if(kilitliMi==0){
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <kapiKontrol+0x78>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <kapiKontrol+0x22>
			TIM2->CCR1=SERVO_ANGLE_0; // kilit varsa kapı açilmaz.
 8001368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0); //DIS ISIK AC.
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4818      	ldr	r0, [pc, #96]	; (80013d8 <kapiKontrol+0x7c>)
 8001378:	f002 f84c 	bl	8003414 <HAL_GPIO_WritePin>
	 /*  for(int x=0; x<20; x=x+1)
	   {
	     HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
	     HAL_Delay(300);
	   }*/
}
 800137c:	e027      	b.n	80013ce <kapiKontrol+0x72>
	else if(kilitliMi==1 && mesafeFlag==1){
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <kapiKontrol+0x78>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d123      	bne.n	80013ce <kapiKontrol+0x72>
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <kapiKontrol+0x80>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11f      	bne.n	80013ce <kapiKontrol+0x72>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);//DIS ISIK ac.
 800138e:	2201      	movs	r2, #1
 8001390:	2108      	movs	r1, #8
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <kapiKontrol+0x7c>)
 8001394:	f002 f83e 	bl	8003414 <HAL_GPIO_WritePin>
		TIM2->CCR1=SERVO_ANGLE_90;// Servo motoru 90 dereceye döndür, kapiyi aç
 8001398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(2000);
 80013a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013a6:	f001 f849 	bl	800243c <HAL_Delay>
		TIM2->CCR1=SERVO_ANGLE_0; //kapiyi kapayacak.
 80013aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
		  HD44780_Clear();
 80013b4:	f7ff fd46 	bl	8000e44 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fd58 	bl	8000e70 <HD44780_SetCursor>
	    HD44780_PrintStr("HOSGELDIN SUHA");
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <kapiKontrol+0x84>)
 80013c2:	f7ff fdc6 	bl	8000f52 <HD44780_PrintStr>
		HAL_Delay(3000);
 80013c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013ca:	f001 f837 	bl	800243c <HAL_Delay>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000066 	.word	0x20000066
 80013d8:	40020400 	.word	0x40020400
 80013dc:	20000065 	.word	0x20000065
 80013e0:	0800579c 	.word	0x0800579c

080013e4 <icIsiklandirma>:

void icIsiklandirma(){ // A6 IÇ ISIK TUSU, B6 IÇ ISIK ÇIKISI ROLESI
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)){
 80013e8:	2140      	movs	r1, #64	; 0x40
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <icIsiklandirma+0x38>)
 80013ec:	f001 fffa 	bl	80033e4 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <icIsiklandirma+0x24>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);//ROLE ÇALISIYOR
 80013f6:	2201      	movs	r2, #1
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <icIsiklandirma+0x3c>)
 80013fc:	f002 f80a 	bl	8003414 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f001 f81b 	bl	800243c <HAL_Delay>
	}
	else {
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
	}
}
 8001406:	e007      	b.n	8001418 <icIsiklandirma+0x34>
		HAL_Delay(10);
 8001408:	200a      	movs	r0, #10
 800140a:	f001 f817 	bl	800243c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 800140e:	2200      	movs	r2, #0
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <icIsiklandirma+0x3c>)
 8001414:	f001 fffe 	bl	8003414 <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400

08001424 <microDelay>:
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);//Acil durum isigi 1 sönecek.
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);//Acil durum isigi 2 sönecek.
			}
}

void microDelay (uint16_t delay){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <microDelay+0x30>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001436:	bf00      	nop
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <microDelay+0x30>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3f9      	bcc.n	8001438 <microDelay+0x14>
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000014c 	.word	0x2000014c

08001458 <ekran_calistirma>:

void ekran_calistirma (){
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
	char snum[16];
	char snum1[16];
	char snum4[16];
	char snum5[16];
      HD44780_Clear();
 800145e:	f7ff fcf1 	bl	8000e44 <HD44780_Clear>
	  itoa(TCI, snum, 10);
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <ekran_calistirma+0xd8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146c:	220a      	movs	r2, #10
 800146e:	4619      	mov	r1, r3
 8001470:	f004 f8fa 	bl	8005668 <itoa>
	  itoa(TCD, snum1, 10);
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <ekran_calistirma+0xdc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	220a      	movs	r2, #10
 8001480:	4619      	mov	r1, r3
 8001482:	f004 f8f1 	bl	8005668 <itoa>
	  itoa(RHI, snum4, 10);
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <ekran_calistirma+0xe0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	220a      	movs	r2, #10
 8001492:	4619      	mov	r1, r3
 8001494:	f004 f8e8 	bl	8005668 <itoa>
	  itoa(RHD, snum5, 10);
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <ekran_calistirma+0xe4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	463b      	mov	r3, r7
 80014a0:	220a      	movs	r2, #10
 80014a2:	4619      	mov	r1, r3
 80014a4:	f004 f8e0 	bl	8005668 <itoa>
while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 80014a8:	e034      	b.n	8001514 <ekran_calistirma+0xbc>
	  HD44780_SetCursor(0,0);
 80014aa:	2100      	movs	r1, #0
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fcdf 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(snum);
 80014b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd4b 	bl	8000f52 <HD44780_PrintStr>
	  HD44780_SetCursor(2,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2002      	movs	r0, #2
 80014c0:	f7ff fcd6 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(".  C");
 80014c4:	481e      	ldr	r0, [pc, #120]	; (8001540 <ekran_calistirma+0xe8>)
 80014c6:	f7ff fd44 	bl	8000f52 <HD44780_PrintStr>
      HD44780_SetCursor(3,0);
 80014ca:	2100      	movs	r1, #0
 80014cc:	2003      	movs	r0, #3
 80014ce:	f7ff fccf 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(snum1);
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd3b 	bl	8000f52 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 80014dc:	2101      	movs	r1, #1
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fcc6 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(snum4);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd32 	bl	8000f52 <HD44780_PrintStr>
	  HD44780_SetCursor(2,1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2002      	movs	r0, #2
 80014f2:	f7ff fcbd 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(".  %");
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <ekran_calistirma+0xec>)
 80014f8:	f7ff fd2b 	bl	8000f52 <HD44780_PrintStr>
      HD44780_SetCursor(3,1);
 80014fc:	2101      	movs	r1, #1
 80014fe:	2003      	movs	r0, #3
 8001500:	f7ff fcb6 	bl	8000e70 <HD44780_SetCursor>
	  HD44780_PrintStr(snum5);
 8001504:	463b      	mov	r3, r7
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd23 	bl	8000f52 <HD44780_PrintStr>
	  HAL_Delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f000 ff94 	bl	800243c <HAL_Delay>
while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <ekran_calistirma+0xf0>)
 800151a:	f001 ff63 	bl	80033e4 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0c2      	beq.n	80014aa <ekran_calistirma+0x52>
}
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3740      	adds	r7, #64	; 0x40
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000003f 	.word	0x2000003f
 8001534:	20000040 	.word	0x20000040
 8001538:	2000003d 	.word	0x2000003d
 800153c:	2000003e 	.word	0x2000003e
 8001540:	080057ac 	.word	0x080057ac
 8001544:	080057b4 	.word	0x080057b4
 8001548:	40020800 	.word	0x40020800

0800154c <mesafeKontrol>:
void mesafeKontrol(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,1);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <mesafeKontrol+0x8c>)
 8001558:	f001 ff5c 	bl	8003414 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f000 ff6d 	bl	800243c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <mesafeKontrol+0x8c>)
 800156a:	f001 ff53 	bl	8003414 <HAL_GPIO_WritePin>

		while( !HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14));
 800156e:	bf00      	nop
 8001570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <mesafeKontrol+0x8c>)
 8001576:	f001 ff35 	bl	80033e4 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f7      	beq.n	8001570 <mesafeKontrol+0x24>
		sayac=0;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <mesafeKontrol+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)){
 8001586:	e005      	b.n	8001594 <mesafeKontrol+0x48>
		sayac++;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <mesafeKontrol+0x90>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <mesafeKontrol+0x90>)
 8001592:	801a      	strh	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)){
 8001594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <mesafeKontrol+0x8c>)
 800159a:	f001 ff23 	bl	80033e4 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f1      	bne.n	8001588 <mesafeKontrol+0x3c>
		}
		mesafe=sayac/25;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <mesafeKontrol+0x90>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <mesafeKontrol+0x94>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <mesafeKontrol+0x98>)
 80015b4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(60);
 80015b6:	203c      	movs	r0, #60	; 0x3c
 80015b8:	f000 ff40 	bl	800243c <HAL_Delay>

		if(mesafe<50){
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <mesafeKontrol+0x98>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	2b31      	cmp	r3, #49	; 0x31
 80015c2:	d803      	bhi.n	80015cc <mesafeKontrol+0x80>
		mesafeFlag=1;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <mesafeKontrol+0x9c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
		}
		else{
			mesafeFlag=0;
		}
}
 80015ca:	e002      	b.n	80015d2 <mesafeKontrol+0x86>
			mesafeFlag=0;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <mesafeKontrol+0x9c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020400 	.word	0x40020400
 80015dc:	2000005a 	.word	0x2000005a
 80015e0:	51eb851f 	.word	0x51eb851f
 80015e4:	2000005c 	.word	0x2000005c
 80015e8:	20000065 	.word	0x20000065

080015ec <DHT11_Start>:

	}
}*/

//NEM VE SİCAKLİK OLCUM KODLARİ
uint8_t DHT11_Start (void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	482a      	ldr	r0, [pc, #168]	; (80016c4 <DHT11_Start+0xd8>)
 800161a:	f001 fd4f 	bl	80030bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	4828      	ldr	r0, [pc, #160]	; (80016c4 <DHT11_Start+0xd8>)
 8001624:	f001 fef6 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001628:	2014      	movs	r0, #20
 800162a:	f000 ff07 	bl	800243c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800162e:	2201      	movs	r2, #1
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	4824      	ldr	r0, [pc, #144]	; (80016c4 <DHT11_Start+0xd8>)
 8001634:	f001 feee 	bl	8003414 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001638:	201e      	movs	r0, #30
 800163a:	f7ff fef3 	bl	8001424 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	481e      	ldr	r0, [pc, #120]	; (80016c4 <DHT11_Start+0xd8>)
 800164c:	f001 fd36 	bl	80030bc <HAL_GPIO_Init>
  microDelay (40);
 8001650:	2028      	movs	r0, #40	; 0x28
 8001652:	f7ff fee7 	bl	8001424 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <DHT11_Start+0xd8>)
 800165a:	f001 fec3 	bl	80033e4 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10b      	bne.n	800167c <DHT11_Start+0x90>
  {
    microDelay (80);
 8001664:	2050      	movs	r0, #80	; 0x50
 8001666:	f7ff fedd 	bl	8001424 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	4815      	ldr	r0, [pc, #84]	; (80016c4 <DHT11_Start+0xd8>)
 800166e:	f001 feb9 	bl	80033e4 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <DHT11_Start+0x90>
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 800167c:	f000 fed2 	bl	8002424 <HAL_GetTick>
 8001680:	4603      	mov	r3, r0
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <DHT11_Start+0xdc>)
 8001684:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001686:	f000 fecd 	bl	8002424 <HAL_GetTick>
 800168a:	4603      	mov	r3, r0
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <DHT11_Start+0xe0>)
 800168e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001690:	e004      	b.n	800169c <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 8001692:	f000 fec7 	bl	8002424 <HAL_GetTick>
 8001696:	4603      	mov	r3, r0
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <DHT11_Start+0xe0>)
 800169a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <DHT11_Start+0xd8>)
 80016a0:	f001 fea0 	bl	80033e4 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <DHT11_Start+0xcc>
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <DHT11_Start+0xdc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1c9a      	adds	r2, r3, #2
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <DHT11_Start+0xe0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8ec      	bhi.n	8001692 <DHT11_Start+0xa6>
  }
  return Response;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020400 	.word	0x40020400
 80016c8:	20000044 	.word	0x20000044
 80016cc:	20000048 	.word	0x20000048

080016d0 <DHT11_Read>:

uint8_t DHT11_Read (void){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	e063      	b.n	80017a4 <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 80016dc:	f000 fea2 	bl	8002424 <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <DHT11_Read+0xe4>)
 80016e4:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80016e6:	f000 fe9d 	bl	8002424 <HAL_GetTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <DHT11_Read+0xe8>)
 80016ee:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80016f0:	e004      	b.n	80016fc <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80016f2:	f000 fe97 	bl	8002424 <HAL_GetTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <DHT11_Read+0xe8>)
 80016fa:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	482f      	ldr	r0, [pc, #188]	; (80017bc <DHT11_Read+0xec>)
 8001700:	f001 fe70 	bl	80033e4 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <DHT11_Read+0x48>
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <DHT11_Read+0xe4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c9a      	adds	r2, r3, #2
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <DHT11_Read+0xe8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8ec      	bhi.n	80016f2 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001718:	2028      	movs	r0, #40	; 0x28
 800171a:	f7ff fe83 	bl	8001424 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	4826      	ldr	r0, [pc, #152]	; (80017bc <DHT11_Read+0xec>)
 8001722:	f001 fe5f 	bl	80033e4 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2201      	movs	r2, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	b25b      	sxtb	r3, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	b25a      	sxtb	r2, r3
 800173e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001742:	4013      	ands	r3, r2
 8001744:	b25b      	sxtb	r3, r3
 8001746:	71bb      	strb	r3, [r7, #6]
 8001748:	e00b      	b.n	8001762 <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f1c3 0307 	rsb	r3, r3, #7
 8001750:	2201      	movs	r2, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001762:	f000 fe5f 	bl	8002424 <HAL_GetTick>
 8001766:	4603      	mov	r3, r0
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <DHT11_Read+0xe4>)
 800176a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800176c:	f000 fe5a 	bl	8002424 <HAL_GetTick>
 8001770:	4603      	mov	r3, r0
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <DHT11_Read+0xe8>)
 8001774:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001776:	e004      	b.n	8001782 <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001778:	f000 fe54 	bl	8002424 <HAL_GetTick>
 800177c:	4603      	mov	r3, r0
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <DHT11_Read+0xe8>)
 8001780:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <DHT11_Read+0xec>)
 8001786:	f001 fe2d 	bl	80033e4 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <DHT11_Read+0xce>
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <DHT11_Read+0xe4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	1c9a      	adds	r2, r3, #2
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <DHT11_Read+0xe8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d8ec      	bhi.n	8001778 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	3301      	adds	r3, #1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	d998      	bls.n	80016dc <DHT11_Read+0xc>
    }
  }
  return b;
 80017aa:	79bb      	ldrb	r3, [r7, #6]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000044 	.word	0x20000044
 80017b8:	20000048 	.word	0x20000048
 80017bc:	40020400 	.word	0x40020400

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	ed2d 8b02 	vpush	{d8}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ca:	f000 fdc5 	bl	8002358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ce:	f000 f917 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d2:	f000 fb07 	bl	8001de4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017d6:	f000 faa1 	bl	8001d1c <MX_TIM2_Init>
  MX_ADC1_Init();
 80017da:	f000 f97d 	bl	8001ad8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017de:	f000 f9cd 	bl	8001b7c <MX_ADC2_Init>
  MX_I2C1_Init();
 80017e2:	f000 fa1d 	bl	8001c20 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017e6:	f000 fa49 	bl	8001c7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
HD44780_Init(2);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7ff faa6 	bl	8000d3c <HD44780_Init>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //  KAPI Timer'i için 1.kanali aktif ediyor.
 80017f0:	2100      	movs	r1, #0
 80017f2:	4874      	ldr	r0, [pc, #464]	; (80019c4 <main+0x204>)
 80017f4:	f003 f936 	bl	8004a64 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PERDE için timer.
 80017f8:	2104      	movs	r1, #4
 80017fa:	4872      	ldr	r0, [pc, #456]	; (80019c4 <main+0x204>)
 80017fc:	f003 f932 	bl	8004a64 <HAL_TIM_PWM_Start>
HAL_TIM_Base_Start(&htim1); //sicaklik sensörü timeri
 8001800:	4871      	ldr	r0, [pc, #452]	; (80019c8 <main+0x208>)
 8001802:	f003 f877 	bl	80048f4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			Gas_System();
 8001806:	f7ff fce5 	bl	80011d4 <Gas_System>
			isikKontrol();
 800180a:	f7ff fd4d 	bl	80012a8 <isikKontrol>
			perdeKontrol();
 800180e:	f7ff fd71 	bl	80012f4 <perdeKontrol>
			kilitFonksiyonu();
 8001812:	f7ff fcab 	bl	800116c <kilitFonksiyonu>
			mesafeKontrol();
 8001816:	f7ff fe99 	bl	800154c <mesafeKontrol>
			kapiKontrol();
 800181a:	f7ff fd9f 	bl	800135c <kapiKontrol>
			icIsiklandirma();
 800181e:	f7ff fde1 	bl	80013e4 <icIsiklandirma>
			  //suKontrol(); su çalismadigi için kapadim.
				// suAlarmKontrol();

			  if(DHT11_Start())
 8001822:	f7ff fee3 	bl	80015ec <DHT11_Start>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80be 	beq.w	80019aa <main+0x1ea>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 800182e:	f7ff ff4f 	bl	80016d0 <DHT11_Read>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <main+0x20c>)
 8001838:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 800183a:	f7ff ff49 	bl	80016d0 <DHT11_Read>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <main+0x210>)
 8001844:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 8001846:	f7ff ff43 	bl	80016d0 <DHT11_Read>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <main+0x214>)
 8001850:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 8001852:	f7ff ff3d 	bl	80016d0 <DHT11_Read>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <main+0x218>)
 800185c:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 800185e:	f7ff ff37 	bl	80016d0 <DHT11_Read>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <main+0x21c>)
 8001868:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <main+0x20c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <main+0x210>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4413      	add	r3, r2
 8001876:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <main+0x214>)
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <main+0x218>)
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	4a56      	ldr	r2, [pc, #344]	; (80019dc <main+0x21c>)
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	4293      	cmp	r3, r2
 8001888:	d172      	bne.n	8001970 <main+0x1b0>
	      {
	        // Can use RHI and TCI for any purposes if whole number only needed
	        tCelsius = (float)TCI + (float)(TCD/10.0);
 800188a:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <main+0x214>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <main+0x218>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe04 	bl	80004a8 <__aeabi_i2d>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <main+0x220>)
 80018a6:	f7fe ff93 	bl	80007d0 <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f875 	bl	80009a0 <__aeabi_d2f>
 80018b6:	ee07 0a90 	vmov	s15, r0
 80018ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <main+0x224>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
	        tFahrenheit = tCelsius * 9/5 + 32;
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <main+0x224>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80018ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80018d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018da:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80019e8 <main+0x228>
 80018de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e2:	4b42      	ldr	r3, [pc, #264]	; (80019ec <main+0x22c>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]
	        RH = (float)RHI + (float)(RHD/10.0);
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <main+0x20c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <main+0x210>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fdd5 	bl	80004a8 <__aeabi_i2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <main+0x220>)
 8001904:	f7fe ff64 	bl	80007d0 <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f846 	bl	80009a0 <__aeabi_d2f>
 8001914:	ee07 0a90 	vmov	s15, r0
 8001918:	ee78 7a27 	vadd.f32	s15, s16, s15
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <main+0x230>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
	        // Can use tCelsius, tFahrenheit and RH for any purposes
	        TFI = tFahrenheit;  // Fahrenheit integral
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <main+0x22c>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001930:	793b      	ldrb	r3, [r7, #4]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <main+0x234>)
 8001936:	701a      	strb	r2, [r3, #0]
	        TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <main+0x22c>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001942:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <main+0x234>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001964:	edc7 7a01 	vstr	s15, [r7, #4]
 8001968:	793b      	ldrb	r3, [r7, #4]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <main+0x238>)
 800196e:	701a      	strb	r2, [r3, #0]
				}
	        if (TCI <= 27) //  hava sogukken 5 saniye role ardından fan da calisir
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <main+0x214>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b1b      	cmp	r3, #27
 8001976:	d80a      	bhi.n	800198e <main+0x1ce>
	              {

	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);     //  tasdirenc
 8001978:	2200      	movs	r2, #0
 800197a:	2101      	movs	r1, #1
 800197c:	481f      	ldr	r0, [pc, #124]	; (80019fc <main+0x23c>)
 800197e:	f001 fd49 	bl	8003414 <HAL_GPIO_WritePin>
	        		//HAL_Delay(5000);
	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);    //pervane
 8001982:	2201      	movs	r2, #1
 8001984:	2102      	movs	r1, #2
 8001986:	481d      	ldr	r0, [pc, #116]	; (80019fc <main+0x23c>)
 8001988:	f001 fd44 	bl	8003414 <HAL_GPIO_WritePin>
 800198c:	e00d      	b.n	80019aa <main+0x1ea>
	              }
	              else if (TCI >= 29 )
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <main+0x214>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b1c      	cmp	r3, #28
 8001994:	d909      	bls.n	80019aa <main+0x1ea>
	              {

	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	2101      	movs	r1, #1
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <main+0x23c>)
 800199c:	f001 fd3a 	bl	8003414 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2102      	movs	r1, #2
 80019a4:	4815      	ldr	r0, [pc, #84]	; (80019fc <main+0x23c>)
 80019a6:	f001 fd35 	bl	8003414 <HAL_GPIO_WritePin>

	                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
	                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
	              }*/
			}
		 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==0){
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <main+0x23c>)
 80019b0:	f001 fd18 	bl	80033e4 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f af25 	bne.w	8001806 <main+0x46>
			 ekran_calistirma();
 80019bc:	f7ff fd4c 	bl	8001458 <ekran_calistirma>
			Gas_System();
 80019c0:	e721      	b.n	8001806 <main+0x46>
 80019c2:	bf00      	nop
 80019c4:	20000194 	.word	0x20000194
 80019c8:	2000014c 	.word	0x2000014c
 80019cc:	2000003d 	.word	0x2000003d
 80019d0:	2000003e 	.word	0x2000003e
 80019d4:	2000003f 	.word	0x2000003f
 80019d8:	20000040 	.word	0x20000040
 80019dc:	20000041 	.word	0x20000041
 80019e0:	40240000 	.word	0x40240000
 80019e4:	2000004c 	.word	0x2000004c
 80019e8:	42000000 	.word	0x42000000
 80019ec:	20000050 	.word	0x20000050
 80019f0:	20000054 	.word	0x20000054
 80019f4:	20000058 	.word	0x20000058
 80019f8:	20000059 	.word	0x20000059
 80019fc:	40020800 	.word	0x40020800

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fe6e 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	2301      	movs	r3, #1
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a68:	2310      	movs	r3, #16
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a74:	2308      	movs	r3, #8
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a78:	2348      	movs	r3, #72	; 0x48
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fc43 	bl	8004318 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a98:	f000 fa74 	bl	8001f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 f97d 	bl	8003db8 <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ac4:	f000 fa5e 	bl	8001f84 <Error_Handler>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3750      	adds	r7, #80	; 0x50
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <MX_ADC1_Init+0x9c>)
 8001aee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <MX_ADC1_Init+0xa0>)
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b38:	f000 fca4 	bl	8002484 <HAL_ADC_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fa1f 	bl	8001f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b46:	2309      	movs	r3, #9
 8001b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_ADC1_Init+0x98>)
 8001b58:	f000 ff66 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f000 fa0f 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000068 	.word	0x20000068
 8001b74:	40012000 	.word	0x40012000
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001b92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <MX_ADC2_Init+0xa0>)
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bdc:	f000 fc52 	bl	8002484 <HAL_ADC_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001be6:	f000 f9cd 	bl	8001f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bea:	2303      	movs	r3, #3
 8001bec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_ADC2_Init+0x98>)
 8001bfc:	f000 ff14 	bl	8002a28 <HAL_ADC_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001c06:	f000 f9bd 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000b0 	.word	0x200000b0
 8001c18:	40012100 	.word	0x40012100
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <MX_I2C1_Init+0x54>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c2c:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_I2C1_Init+0x58>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c5e:	f001 fc0d 	bl	800347c <HAL_I2C_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c68:	f000 f98c 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200000f8 	.word	0x200000f8
 8001c74:	40005400 	.word	0x40005400
 8001c78:	000186a0 	.word	0x000186a0

08001c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <MX_TIM1_Init+0x9c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001ca0:	2247      	movs	r2, #71	; 0x47
 8001ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc4:	4813      	ldr	r0, [pc, #76]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cc6:	f002 fdc5 	bl	8004854 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cd0:	f000 f958 	bl	8001f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001ce2:	f003 f849 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cec:	f000 f94a 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_TIM1_Init+0x98>)
 8001cfe:	f003 fc1f 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d08:	f000 f93c 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000014c 	.word	0x2000014c
 8001d18:	40010000 	.word	0x40010000

08001d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d48:	228f      	movs	r2, #143	; 0x8f
 8001d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d54:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d66:	481e      	ldr	r0, [pc, #120]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d68:	f002 fe2c 	bl	80049c4 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d72:	f000 f907 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	4619      	mov	r1, r3
 8001d84:	4816      	ldr	r0, [pc, #88]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001d86:	f003 fbdb 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d90:	f000 f8f8 	bl	8001f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001dac:	f002 ff22 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001db6:	f000 f8e5 	bl	8001f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001dc2:	f002 ff17 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001dcc:	f000 f8da 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM2_Init+0xc4>)
 8001dd2:	f000 fa15 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000194 	.word	0x20000194

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a4d      	ldr	r2, [pc, #308]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a46      	ldr	r2, [pc, #280]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a3f      	ldr	r2, [pc, #252]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <MX_GPIO_Init+0x18c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8001e86:	2200      	movs	r2, #0
 8001e88:	f240 3143 	movw	r1, #835	; 0x343
 8001e8c:	4839      	ldr	r0, [pc, #228]	; (8001f74 <MX_GPIO_Init+0x190>)
 8001e8e:	f001 fac1 	bl	8003414 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f248 01c8 	movw	r1, #32968	; 0x80c8
 8001e98:	4837      	ldr	r0, [pc, #220]	; (8001f78 <MX_GPIO_Init+0x194>)
 8001e9a:	f001 fabb 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	4836      	ldr	r0, [pc, #216]	; (8001f7c <MX_GPIO_Init+0x198>)
 8001ea4:	f001 fab6 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	482d      	ldr	r0, [pc, #180]	; (8001f74 <MX_GPIO_Init+0x190>)
 8001ebe:	f001 f8fd 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC6 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8001ec2:	f240 3343 	movw	r3, #835	; 0x343
 8001ec6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4826      	ldr	r0, [pc, #152]	; (8001f74 <MX_GPIO_Init+0x190>)
 8001edc:	f001 f8ee 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4823      	ldr	r0, [pc, #140]	; (8001f80 <MX_GPIO_Init+0x19c>)
 8001ef4:	f001 f8e2 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001ef8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481c      	ldr	r0, [pc, #112]	; (8001f80 <MX_GPIO_Init+0x19c>)
 8001f0e:	f001 f8d5 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4814      	ldr	r0, [pc, #80]	; (8001f78 <MX_GPIO_Init+0x194>)
 8001f28:	f001 f8c8 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001f2c:	f248 03c8 	movw	r3, #32968	; 0x80c8
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <MX_GPIO_Init+0x194>)
 8001f46:	f001 f8b9 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_GPIO_Init+0x198>)
 8001f62:	f001 f8ab 	bl	80030bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40020000 	.word	0x40020000

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x8>
	...

08001f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a36      	ldr	r2, [pc, #216]	; (80020d8 <HAL_ADC_MspInit+0xf8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d130      	bne.n	8002064 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800203a:	2302      	movs	r3, #2
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4824      	ldr	r0, [pc, #144]	; (80020e0 <HAL_ADC_MspInit+0x100>)
 800204e:	f001 f835 	bl	80030bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2012      	movs	r0, #18
 8002058:	f000 fff9 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800205c:	2012      	movs	r0, #18
 800205e:	f001 f812 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002062:	e034      	b.n	80020ce <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_ADC_MspInit+0x104>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12f      	bne.n	80020ce <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_ADC_MspInit+0xfc>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020a6:	2308      	movs	r3, #8
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 80020ba:	f000 ffff 	bl	80030bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2012      	movs	r0, #18
 80020c4:	f000 ffc3 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020c8:	2012      	movs	r0, #18
 80020ca:	f000 ffdc 	bl	8003086 <HAL_NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	; 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012000 	.word	0x40012000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40012100 	.word	0x40012100
 80020e8:	40020000 	.word	0x40020000

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_I2C_MspInit+0x84>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d12c      	bne.n	8002168 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800212a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002130:	2312      	movs	r3, #18
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213c:	2304      	movs	r3, #4
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_I2C_MspInit+0x8c>)
 8002148:	f000 ffb8 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_I2C_MspInit+0x88>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40005400 	.word	0x40005400
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_TIM_Base_MspInit+0x3c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10d      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d10d      	bne.n	80021ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_TIM_PWM_MspInit+0x3c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_TIM_PWM_MspInit+0x3c>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_TIM_PWM_MspInit+0x3c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d11d      	bne.n	800225e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_TIM_MspPostInit+0x68>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_TIM_MspPostInit+0x68>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_TIM_MspPostInit+0x68>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800223e:	2303      	movs	r3, #3
 8002240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224e:	2301      	movs	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4619      	mov	r1, r3
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <HAL_TIM_MspPostInit+0x6c>)
 800225a:	f000 ff2f 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f89e 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022c8:	4803      	ldr	r0, [pc, #12]	; (80022d8 <ADC_IRQHandler+0x14>)
 80022ca:	f000 fa7c 	bl	80027c6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022ce:	4803      	ldr	r0, [pc, #12]	; (80022dc <ADC_IRQHandler+0x18>)
 80022d0:	f000 fa79 	bl	80027c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000068 	.word	0x20000068
 80022dc:	200000b0 	.word	0x200000b0

080022e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002308:	f7ff ffea 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002332:	f003 f9e5 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7ff fa43 	bl	80017c0 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002348:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 800234c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002350:	200001e0 	.word	0x200001e0

08002354 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <CAN1_RX0_IRQHandler>
	...

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_Init+0x40>)
 8002362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_Init+0x40>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_Init+0x40>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 fe59 	bl	8003038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fe00 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fe71 	bl	80030a2 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 fe39 	bl	800304e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000010 	.word	0x20000010
 80023f4:	20000018 	.word	0x20000018
 80023f8:	20000014 	.word	0x20000014

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000018 	.word	0x20000018
 8002420:	200001dc 	.word	0x200001dc

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200001dc 	.word	0x200001dc

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000018 	.word	0x20000018

08002484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e033      	b.n	8002502 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fd9c 	bl	8001fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fbd8 	bl	8002c8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
 80024f2:	e001      	b.n	80024f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Start+0x1a>
 8002522:	2302      	movs	r3, #2
 8002524:	e0b2      	b.n	800268c <HAL_ADC_Start+0x180>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d018      	beq.n	800256e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800254c:	4b52      	ldr	r3, [pc, #328]	; (8002698 <HAL_ADC_Start+0x18c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_ADC_Start+0x190>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9a      	lsrs	r2, r3, #18
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002560:	e002      	b.n	8002568 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d17a      	bne.n	8002672 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f023 0206 	bic.w	r2, r3, #6
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_ADC_Start+0x194>)
 80025da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025e4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d12a      	bne.n	8002648 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <HAL_ADC_Start+0x198>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d015      	beq.n	8002628 <HAL_ADC_Start+0x11c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_ADC_Start+0x19c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d105      	bne.n	8002612 <HAL_ADC_Start+0x106>
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_ADC_Start+0x194>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a25      	ldr	r2, [pc, #148]	; (80026ac <HAL_ADC_Start+0x1a0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d136      	bne.n	800268a <HAL_ADC_Start+0x17e>
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_ADC_Start+0x194>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d130      	bne.n	800268a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d129      	bne.n	800268a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e020      	b.n	800268a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <HAL_ADC_Start+0x198>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11b      	bne.n	800268a <HAL_ADC_Start+0x17e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d114      	bne.n	800268a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e00b      	b.n	800268a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20000010 	.word	0x20000010
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	40012300 	.word	0x40012300
 80026a4:	40012000 	.word	0x40012000
 80026a8:	40012100 	.word	0x40012100
 80026ac:	40012200 	.word	0x40012200

080026b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d113      	bne.n	80026f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026dc:	d10b      	bne.n	80026f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e063      	b.n	80027be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f6:	f7ff fe95 	bl	8002424 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026fc:	e021      	b.n	8002742 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d01d      	beq.n	8002742 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_ADC_PollForConversion+0x6c>
 800270c:	f7ff fe8a 	bl	8002424 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d212      	bcs.n	8002742 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d00b      	beq.n	8002742 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e03d      	b.n	80027be <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d1d6      	bne.n	80026fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0212 	mvn.w	r2, #18
 8002758:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d123      	bne.n	80027bc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11f      	bne.n	80027bc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d049      	beq.n	8002890 <HAL_ADC_IRQHandler+0xca>
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d046      	beq.n	8002890 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d105      	bne.n	800281a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12b      	bne.n	8002880 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d127      	bne.n	8002880 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002848:	2b00      	cmp	r3, #0
 800284a:	d119      	bne.n	8002880 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0220 	bic.w	r2, r2, #32
 800285a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fc55 	bl	8001130 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0212 	mvn.w	r2, #18
 800288e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d057      	beq.n	8002956 <HAL_ADC_IRQHandler+0x190>
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d054      	beq.n	8002956 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d139      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d12b      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d124      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002920:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa9c 	bl	8002e84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 020c 	mvn.w	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_ADC_IRQHandler+0x1d6>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10d      	bne.n	800299c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f837 	bl	8002a00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0201 	mvn.w	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029aa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <HAL_ADC_IRQHandler+0x218>
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0202 	orr.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0220 	mvn.w	r2, #32
 80029cc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f820 	bl	8002a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0220 	mvn.w	r2, #32
 80029dc:	601a      	str	r2, [r3, #0]
  }
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1c>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e113      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x244>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	d925      	bls.n	8002aa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	3b1e      	subs	r3, #30
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68d9      	ldr	r1, [r3, #12]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4403      	add	r3, r0
 8002a92:	3b1e      	subs	r3, #30
 8002a94:	409a      	lsls	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e022      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6919      	ldr	r1, [r3, #16]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4403      	add	r3, r0
 8002adc:	409a      	lsls	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d824      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	3b05      	subs	r3, #5
 8002b00:	221f      	movs	r2, #31
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b05      	subs	r3, #5
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
 8002b36:	e04c      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d824      	bhi.n	8002b8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b23      	subs	r3, #35	; 0x23
 8002b52:	221f      	movs	r2, #31
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	400a      	ands	r2, r1
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b23      	subs	r3, #35	; 0x23
 8002b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
 8002b88:	e023      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b41      	subs	r3, #65	; 0x41
 8002b9c:	221f      	movs	r2, #31
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b41      	subs	r3, #65	; 0x41
 8002bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_ADC_ConfigChannel+0x250>)
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a28      	ldr	r2, [pc, #160]	; (8002c7c <HAL_ADC_ConfigChannel+0x254>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10f      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1d8>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_ADC_ConfigChannel+0x254>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d12b      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x23a>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_ADC_ConfigChannel+0x258>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x1f4>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b11      	cmp	r3, #17
 8002c1a:	d122      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_ADC_ConfigChannel+0x258>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_ADC_ConfigChannel+0x25c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_ADC_ConfigChannel+0x260>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9a      	lsrs	r2, r3, #18
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f9      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	10000012 	.word	0x10000012
 8002c84:	20000010 	.word	0x20000010
 8002c88:	431bde83 	.word	0x431bde83

08002c8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c94:	4b79      	ldr	r3, [pc, #484]	; (8002e7c <ADC_Init+0x1f0>)
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <ADC_Init+0x1f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e00f      	b.n	8002d8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0202 	bic.w	r2, r2, #2
 8002d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7e1b      	ldrb	r3, [r3, #24]
 8002da4:	005a      	lsls	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	3b01      	subs	r3, #1
 8002de4:	035a      	lsls	r2, r3, #13
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e007      	b.n	8002e00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	051a      	lsls	r2, r3, #20
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e42:	025a      	lsls	r2, r3, #9
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	029a      	lsls	r2, r3, #10
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40012300 	.word	0x40012300
 8002e80:	0f000001 	.word	0x0f000001

08002e84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
         );
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003004:	d301      	bcc.n	800300a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003006:	2301      	movs	r3, #1
 8003008:	e00f      	b.n	800302a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <SysTick_Config+0x40>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003012:	210f      	movs	r1, #15
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f7ff ff8e 	bl	8002f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <SysTick_Config+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <SysTick_Config+0x40>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	e000e010 	.word	0xe000e010

08003038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff29 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003060:	f7ff ff3e 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff8e 	bl	8002f8c <NVIC_EncodePriority>
 8003070:	4602      	mov	r2, r0
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff5d 	bl	8002f38 <__NVIC_SetPriority>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff31 	bl	8002efc <__NVIC_EnableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ffa2 	bl	8002ff4 <SysTick_Config>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e165      	b.n	80033a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d8:	2201      	movs	r2, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f040 8154 	bne.w	800339e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d005      	beq.n	800310e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310a:	2b02      	cmp	r3, #2
 800310c:	d130      	bne.n	8003170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003144:	2201      	movs	r2, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 0201 	and.w	r2, r3, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b03      	cmp	r3, #3
 800317a:	d017      	beq.n	80031ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d123      	bne.n	8003200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	08da      	lsrs	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3208      	adds	r2, #8
 80031c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3208      	adds	r2, #8
 80031fa:	69b9      	ldr	r1, [r7, #24]
 80031fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0203 	and.w	r2, r3, #3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80ae 	beq.w	800339e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b5d      	ldr	r3, [pc, #372]	; (80033bc <HAL_GPIO_Init+0x300>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a5c      	ldr	r2, [pc, #368]	; (80033bc <HAL_GPIO_Init+0x300>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b5a      	ldr	r3, [pc, #360]	; (80033bc <HAL_GPIO_Init+0x300>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325e:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_GPIO_Init+0x304>)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	3302      	adds	r3, #2
 8003266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4f      	ldr	r2, [pc, #316]	; (80033c4 <HAL_GPIO_Init+0x308>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d025      	beq.n	80032d6 <HAL_GPIO_Init+0x21a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4e      	ldr	r2, [pc, #312]	; (80033c8 <HAL_GPIO_Init+0x30c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <HAL_GPIO_Init+0x216>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <HAL_GPIO_Init+0x310>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x212>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4c      	ldr	r2, [pc, #304]	; (80033d0 <HAL_GPIO_Init+0x314>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <HAL_GPIO_Init+0x318>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x20a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x31c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x206>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x320>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x202>
 80032ba:	2306      	movs	r3, #6
 80032bc:	e00c      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032be:	2307      	movs	r3, #7
 80032c0:	e00a      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032c2:	2305      	movs	r3, #5
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x21c>
 80032d6:	2300      	movs	r3, #0
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <HAL_GPIO_Init+0x304>)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_GPIO_Init+0x324>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_GPIO_Init+0x324>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_GPIO_Init+0x324>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <HAL_GPIO_Init+0x324>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f ae96 	bls.w	80030d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021400 	.word	0x40021400
 80033dc:	40021800 	.word	0x40021800
 80033e0:	40013c00 	.word	0x40013c00

080033e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e001      	b.n	8003406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003458:	887a      	ldrh	r2, [r7, #2]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	041a      	lsls	r2, r3, #16
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43d9      	mvns	r1, r3
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	400b      	ands	r3, r1
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e12b      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fe22 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f000 fd5c 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a81      	ldr	r2, [pc, #516]	; (80036f0 <HAL_I2C_Init+0x274>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a80      	ldr	r2, [pc, #512]	; (80036f4 <HAL_I2C_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <HAL_I2C_Init+0x27c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e7      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <HAL_I2C_Init+0x280>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a6a      	ldr	r2, [pc, #424]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_I2C_Init+0x284>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	495c      	ldr	r1, [pc, #368]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d819      	bhi.n	80035b8 <HAL_I2C_Init+0x13c>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003598:	400b      	ands	r3, r1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_I2C_Init+0x138>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	e051      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e04f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d111      	bne.n	80035e4 <HAL_I2C_Init+0x168>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <HAL_I2C_Init+0x18e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x196>
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <HAL_I2C_Init+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e58      	subs	r0, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	fbb0 f3f3 	udiv	r3, r0, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6809      	ldr	r1, [r1, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6911      	ldr	r1, [r2, #16]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	000186a0 	.word	0x000186a0
 80036f4:	001e847f 	.word	0x001e847f
 80036f8:	003d08ff 	.word	0x003d08ff
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
 8003714:	4613      	mov	r3, r2
 8003716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7fe fe84 	bl	8002424 <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	f040 80e0 	bne.w	80038ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2319      	movs	r3, #25
 8003732:	2201      	movs	r2, #1
 8003734:	4970      	ldr	r1, [pc, #448]	; (80038f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f964 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	e0d3      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_I2C_Master_Transmit+0x50>
 8003750:	2302      	movs	r3, #2
 8003752:	e0cc      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d007      	beq.n	800377a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2210      	movs	r2, #16
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	893a      	ldrh	r2, [r7, #8]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_I2C_Master_Transmit+0x1f8>)
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f89c 	bl	8003900 <I2C_MasterRequestWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e08d      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037e8:	e066      	b.n	80038b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	6a39      	ldr	r1, [r7, #32]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fa22 	bl	8003c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_I2C_Master_Transmit+0x188>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa19 	bl	8003cc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e01a      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d194      	bne.n	80037ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	00100002 	.word	0x00100002
 80038fc:	ffff0000 	.word	0xffff0000

08003900 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	460b      	mov	r3, r1
 800390e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d006      	beq.n	800392a <I2C_MasterRequestWrite+0x2a>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d003      	beq.n	800392a <I2C_MasterRequestWrite+0x2a>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003928:	d108      	bne.n	800393c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e00b      	b.n	8003954 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	2b12      	cmp	r3, #18
 8003942:	d107      	bne.n	8003954 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f84f 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	d103      	bne.n	8003984 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e035      	b.n	80039f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003990:	d108      	bne.n	80039a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	e01b      	b.n	80039dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	11db      	asrs	r3, r3, #7
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 0306 	and.w	r3, r3, #6
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f063 030f 	orn	r3, r3, #15
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <I2C_MasterRequestWrite+0xfc>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f898 	bl	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e010      	b.n	80039f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <I2C_MasterRequestWrite+0x100>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f888 	bl	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00010008 	.word	0x00010008
 8003a00:	00010002 	.word	0x00010002

08003a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a14:	e048      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d044      	beq.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fe fd01 	bl	8002424 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d139      	bne.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10d      	bne.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	43da      	mvns	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	e00c      	b.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d116      	bne.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e023      	b.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10d      	bne.n	8003ace <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	e00c      	b.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d093      	beq.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b06:	e071      	b.n	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d123      	bne.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e067      	b.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d041      	beq.n	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7fe fc5c 	bl	8002424 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d136      	bne.n	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10c      	bne.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e00b      	b.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e021      	b.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10c      	bne.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e00b      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af6d 	bne.w	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c44:	e034      	b.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f886 	bl	8003d58 <I2C_IsAcknowledgeFailed>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e034      	b.n	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d028      	beq.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fe fbe1 	bl	8002424 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11d      	bne.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d016      	beq.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d1c3      	bne.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd4:	e034      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f83e 	bl	8003d58 <I2C_IsAcknowledgeFailed>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e034      	b.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d028      	beq.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fe fb99 	bl	8002424 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11d      	bne.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d016      	beq.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d1c3      	bne.n	8003cd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d11b      	bne.n	8003da8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fabc 	bl	8002424 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fe fab8 	bl	8002424 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f841 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fa1c 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	080057bc 	.word	0x080057bc
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000014 	.word	0x20000014

08003f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000010 	.word	0x20000010

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa0:	f7ff fff0 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0a9b      	lsrs	r3, r3, #10
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	080057cc 	.word	0x080057cc

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b0a6      	sub	sp, #152	; 0x98
 8003fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fea:	4bc8      	ldr	r3, [pc, #800]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	f200 817e 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x330>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004035 	.word	0x08004035
 8004004:	080042f5 	.word	0x080042f5
 8004008:	080042f5 	.word	0x080042f5
 800400c:	080042f5 	.word	0x080042f5
 8004010:	0800403d 	.word	0x0800403d
 8004014:	080042f5 	.word	0x080042f5
 8004018:	080042f5 	.word	0x080042f5
 800401c:	080042f5 	.word	0x080042f5
 8004020:	08004045 	.word	0x08004045
 8004024:	080042f5 	.word	0x080042f5
 8004028:	080042f5 	.word	0x080042f5
 800402c:	080042f5 	.word	0x080042f5
 8004030:	080041af 	.word	0x080041af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4bb6      	ldr	r3, [pc, #728]	; (8004310 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800403a:	e15f      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403c:	4bb5      	ldr	r3, [pc, #724]	; (8004314 <HAL_RCC_GetSysClockFreq+0x350>)
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004042:	e15b      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004044:	4bb1      	ldr	r3, [pc, #708]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800404c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004050:	4bae      	ldr	r3, [pc, #696]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d031      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4bab      	ldr	r3, [pc, #684]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	2200      	movs	r2, #0
 8004064:	66bb      	str	r3, [r7, #104]	; 0x68
 8004066:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	663b      	str	r3, [r7, #96]	; 0x60
 8004070:	2300      	movs	r3, #0
 8004072:	667b      	str	r3, [r7, #100]	; 0x64
 8004074:	4ba7      	ldr	r3, [pc, #668]	; (8004314 <HAL_RCC_GetSysClockFreq+0x350>)
 8004076:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800407a:	462a      	mov	r2, r5
 800407c:	fb03 f202 	mul.w	r2, r3, r2
 8004080:	2300      	movs	r3, #0
 8004082:	4621      	mov	r1, r4
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	4aa2      	ldr	r2, [pc, #648]	; (8004314 <HAL_RCC_GetSysClockFreq+0x350>)
 800408c:	4621      	mov	r1, r4
 800408e:	fba1 1202 	umull	r1, r2, r1, r2
 8004092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004094:	460a      	mov	r2, r1
 8004096:	67ba      	str	r2, [r7, #120]	; 0x78
 8004098:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800409a:	4413      	add	r3, r2
 800409c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800409e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a2:	2200      	movs	r2, #0
 80040a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80040b0:	f7fc fcc6 	bl	8000a40 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4613      	mov	r3, r2
 80040ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040be:	e064      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c0:	4b92      	ldr	r3, [pc, #584]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	2200      	movs	r2, #0
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
 80040ca:	657a      	str	r2, [r7, #84]	; 0x54
 80040cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d4:	2300      	movs	r3, #0
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	f04f 0000 	mov.w	r0, #0
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	0159      	lsls	r1, r3, #5
 80040ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ee:	0150      	lsls	r0, r2, #5
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4621      	mov	r1, r4
 80040f6:	1a51      	subs	r1, r2, r1
 80040f8:	6139      	str	r1, [r7, #16]
 80040fa:	4629      	mov	r1, r5
 80040fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800410e:	4659      	mov	r1, fp
 8004110:	018b      	lsls	r3, r1, #6
 8004112:	4651      	mov	r1, sl
 8004114:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004118:	4651      	mov	r1, sl
 800411a:	018a      	lsls	r2, r1, #6
 800411c:	4651      	mov	r1, sl
 800411e:	ebb2 0801 	subs.w	r8, r2, r1
 8004122:	4659      	mov	r1, fp
 8004124:	eb63 0901 	sbc.w	r9, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413c:	4690      	mov	r8, r2
 800413e:	4699      	mov	r9, r3
 8004140:	4623      	mov	r3, r4
 8004142:	eb18 0303 	adds.w	r3, r8, r3
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800415c:	4629      	mov	r1, r5
 800415e:	028b      	lsls	r3, r1, #10
 8004160:	4621      	mov	r1, r4
 8004162:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004166:	4621      	mov	r1, r4
 8004168:	028a      	lsls	r2, r1, #10
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004172:	2200      	movs	r2, #0
 8004174:	643b      	str	r3, [r7, #64]	; 0x40
 8004176:	647a      	str	r2, [r7, #68]	; 0x44
 8004178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800417c:	f7fc fc60 	bl	8000a40 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800418a:	4b60      	ldr	r3, [pc, #384]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	3301      	adds	r3, #1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800419c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80041ac:	e0a6      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ae:	4b57      	ldr	r3, [pc, #348]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b54      	ldr	r3, [pc, #336]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d02a      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b51      	ldr	r3, [pc, #324]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041d8:	2100      	movs	r1, #0
 80041da:	4b4e      	ldr	r3, [pc, #312]	; (8004314 <HAL_RCC_GetSysClockFreq+0x350>)
 80041dc:	fb03 f201 	mul.w	r2, r3, r1
 80041e0:	2300      	movs	r3, #0
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	4a4a      	ldr	r2, [pc, #296]	; (8004314 <HAL_RCC_GetSysClockFreq+0x350>)
 80041ea:	fba0 1202 	umull	r1, r2, r0, r2
 80041ee:	677a      	str	r2, [r7, #116]	; 0x74
 80041f0:	460a      	mov	r2, r1
 80041f2:	673a      	str	r2, [r7, #112]	; 0x70
 80041f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041f6:	4413      	add	r3, r2
 80041f8:	677b      	str	r3, [r7, #116]	; 0x74
 80041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041fe:	2200      	movs	r2, #0
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
 8004202:	637a      	str	r2, [r7, #52]	; 0x34
 8004204:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004208:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800420c:	f7fc fc18 	bl	8000a40 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800421a:	e05b      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	2200      	movs	r2, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0159      	lsls	r1, r3, #5
 8004246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424a:	0150      	lsls	r0, r2, #5
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4641      	mov	r1, r8
 8004252:	ebb2 0a01 	subs.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb63 0b01 	sbc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800426c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004270:	ebb2 040a 	subs.w	r4, r2, sl
 8004274:	eb63 050b 	sbc.w	r5, r3, fp
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4643      	mov	r3, r8
 800428e:	18e3      	adds	r3, r4, r3
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	464b      	mov	r3, r9
 8004294:	eb45 0303 	adc.w	r3, r5, r3
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042bc:	2200      	movs	r2, #0
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c6:	f7fc fbbb 	bl	8000a40 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4613      	mov	r3, r2
 80042d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042d4:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_RCC_GetSysClockFreq+0x348>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0f1b      	lsrs	r3, r3, #28
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80042e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042f2:	e003      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetSysClockFreq+0x34c>)
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004300:	4618      	mov	r0, r3
 8004302:	3798      	adds	r7, #152	; 0x98
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	017d7840 	.word	0x017d7840

08004318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e28d      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8083 	beq.w	800443e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004338:	4b94      	ldr	r3, [pc, #592]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b04      	cmp	r3, #4
 8004342:	d019      	beq.n	8004378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004344:	4b91      	ldr	r3, [pc, #580]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800434c:	2b08      	cmp	r3, #8
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004350:	4b8e      	ldr	r3, [pc, #568]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d00c      	beq.n	8004378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b8b      	ldr	r3, [pc, #556]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d112      	bne.n	8004390 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004376:	d10b      	bne.n	8004390 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4b84      	ldr	r3, [pc, #528]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05b      	beq.n	800443c <HAL_RCC_OscConfig+0x124>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d157      	bne.n	800443c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e25a      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x90>
 800439a:	4b7c      	ldr	r3, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a7b      	ldr	r2, [pc, #492]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xcc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0xb4>
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b73      	ldr	r3, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a72      	ldr	r2, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xcc>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b6c      	ldr	r3, [pc, #432]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe f81a 	bl	8002424 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fe f816 	bl	8002424 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e21f      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b61      	ldr	r3, [pc, #388]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xdc>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fe f806 	bl	8002424 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe f802 	bl	8002424 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e20b      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b57      	ldr	r3, [pc, #348]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x104>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d06f      	beq.n	800452a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d105      	bne.n	800446e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_OscConfig+0x274>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x186>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1d3      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	e03a      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x278>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd ffaf 	bl	8002424 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd ffab 	bl	8002424 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1b4      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4925      	ldr	r1, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x274>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x278>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd ff8e 	bl	8002424 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd ff8a 	bl	8002424 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e193      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d036      	beq.n	80045a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd ff6e 	bl	8002424 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd ff6a 	bl	8002424 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e173      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x274>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x234>
 800456a:	e01b      	b.n	80045a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x27c>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fd ff57 	bl	8002424 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e00e      	b.n	8004598 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd ff53 	bl	8002424 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d907      	bls.n	8004598 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e15c      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
 800458c:	40023800 	.word	0x40023800
 8004590:	42470000 	.word	0x42470000
 8004594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b8a      	ldr	r3, [pc, #552]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8097 	beq.w	80046e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	4b7f      	ldr	r3, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	; 0x40
 80045d2:	4b7c      	ldr	r3, [pc, #496]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b79      	ldr	r3, [pc, #484]	; (80047c8 <HAL_RCC_OscConfig+0x4b0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b76      	ldr	r3, [pc, #472]	; (80047c8 <HAL_RCC_OscConfig+0x4b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a75      	ldr	r2, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x4b0>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7fd ff13 	bl	8002424 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd ff0f 	bl	8002424 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e118      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <HAL_RCC_OscConfig+0x4b0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x31e>
 8004628:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
 8004634:	e01c      	b.n	8004670 <HAL_RCC_OscConfig+0x358>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x340>
 800463e:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a60      	ldr	r2, [pc, #384]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5d      	ldr	r2, [pc, #372]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0x358>
 8004658:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a59      	ldr	r2, [pc, #356]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a56      	ldr	r2, [pc, #344]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	f023 0304 	bic.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fed4 	bl	8002424 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fd fed0 	bl	8002424 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0d7      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ee      	beq.n	8004680 <HAL_RCC_OscConfig+0x368>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd febe 	bl	8002424 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fd feba 	bl	8002424 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0c1      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d4:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80ad 	beq.w	8004844 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d060      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d145      	bne.n	800478a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4b4>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fe8e 	bl	8002424 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd fe8a 	bl	8002424 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e093      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4b4>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd fe5f 	bl	8002424 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fd fe5b 	bl	8002424 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e064      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x452>
 8004788:	e05c      	b.n	8004844 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCC_OscConfig+0x4b4>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd fe48 	bl	8002424 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fd fe44 	bl	8002424 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e04d      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x480>
 80047b6:	e045      	b.n	8004844 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e040      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d0:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <HAL_RCC_OscConfig+0x538>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d030      	beq.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d129      	bne.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d122      	bne.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	4293      	cmp	r3, r2
 800480a:	d119      	bne.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d10f      	bne.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e041      	b.n	80048ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fc7e 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f000 fb38 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d001      	beq.n	800490c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e046      	b.n	800499a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_TIM_Base_Start+0xb4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d01d      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_TIM_Base_Start+0xb8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_TIM_Base_Start+0xbc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIM_Base_Start+0xc0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_TIM_Base_Start+0xc4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_TIM_Base_Start+0xc8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start+0x70>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_TIM_Base_Start+0xcc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d010      	beq.n	8004998 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	e007      	b.n	8004998 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800

080049c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e041      	b.n	8004a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fbe8 	bl	80021c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 fa80 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <HAL_TIM_PWM_Start+0x24>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e022      	b.n	8004ace <HAL_TIM_PWM_Start+0x6a>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d109      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x3e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	bf14      	ite	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	2300      	moveq	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	e015      	b.n	8004ace <HAL_TIM_PWM_Start+0x6a>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d109      	bne.n	8004abc <HAL_TIM_PWM_Start+0x58>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e008      	b.n	8004ace <HAL_TIM_PWM_Start+0x6a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07c      	b.n	8004bd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x82>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae4:	e013      	b.n	8004b0e <HAL_TIM_PWM_Start+0xaa>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0x92>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af4:	e00b      	b.n	8004b0e <HAL_TIM_PWM_Start+0xaa>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	e003      	b.n	8004b0e <HAL_TIM_PWM_Start+0xaa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fcec 	bl	80054f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <HAL_TIM_PWM_Start+0x174>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_PWM_Start+0xcc>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <HAL_TIM_PWM_Start+0x178>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIM_PWM_Start+0xd0>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <HAL_TIM_PWM_Start+0xd2>
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <HAL_TIM_PWM_Start+0x174>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d01d      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_TIM_PWM_Start+0x17c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <HAL_TIM_PWM_Start+0x180>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_PWM_Start+0x184>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_TIM_PWM_Start+0x178>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a18      	ldr	r2, [pc, #96]	; (8004bec <HAL_TIM_PWM_Start+0x188>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x136>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <HAL_TIM_PWM_Start+0x18c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b06      	cmp	r3, #6
 8004baa:	d010      	beq.n	8004bce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbc:	e007      	b.n	8004bce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40001800 	.word	0x40001800

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0ae      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	f200 809f 	bhi.w	8004d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004d61 	.word	0x08004d61
 8004c30:	08004d61 	.word	0x08004d61
 8004c34:	08004d61 	.word	0x08004d61
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004d61 	.word	0x08004d61
 8004c40:	08004d61 	.word	0x08004d61
 8004c44:	08004d61 	.word	0x08004d61
 8004c48:	08004cdf 	.word	0x08004cdf
 8004c4c:	08004d61 	.word	0x08004d61
 8004c50:	08004d61 	.word	0x08004d61
 8004c54:	08004d61 	.word	0x08004d61
 8004c58:	08004d1f 	.word	0x08004d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f9fc 	bl	8005060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0208 	orr.w	r2, r2, #8
 8004c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	619a      	str	r2, [r3, #24]
      break;
 8004c9a:	e064      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fa4c 	bl	8005140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]
      break;
 8004cdc:	e043      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 faa1 	bl	800522c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0208 	orr.w	r2, r2, #8
 8004cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69d9      	ldr	r1, [r3, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	61da      	str	r2, [r3, #28]
      break;
 8004d1c:	e023      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 faf5 	bl	8005314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	61da      	str	r2, [r3, #28]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x1c>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0b4      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x186>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d03e      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xd4>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8087 	bhi.w	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	f000 8086 	beq.w	8004eea <HAL_TIM_ConfigClockSource+0x172>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d87f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d01a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xa6>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d87b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d050      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x11a>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d877      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d03c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xfa>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d873      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d058      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d86f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d86b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d060      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d867      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d05a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	e062      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	f000 fb41 	bl	80054b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e04f      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	f000 fb2a 	bl	80054b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	609a      	str	r2, [r3, #8]
      break;
 8004e70:	e03c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fa9e 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2150      	movs	r1, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 faf7 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004e90:	e02c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fabd 	bl	800541e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2160      	movs	r1, #96	; 0x60
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fae7 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e01c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa7e 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fad7 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e00c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 face 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e003      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a43      	ldr	r2, [pc, #268]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a42      	ldr	r2, [pc, #264]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a41      	ldr	r2, [pc, #260]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a40      	ldr	r2, [pc, #256]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a35      	ldr	r2, [pc, #212]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d027      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d023      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a31      	ldr	r2, [pc, #196]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a30      	ldr	r2, [pc, #192]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <TIM_Base_SetConfig+0x140>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2d      	ldr	r2, [pc, #180]	; (800504c <TIM_Base_SetConfig+0x144>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <TIM_Base_SetConfig+0x148>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <TIM_Base_SetConfig+0x14c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <TIM_Base_SetConfig+0x150>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a29      	ldr	r2, [pc, #164]	; (800505c <TIM_Base_SetConfig+0x154>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a12      	ldr	r2, [pc, #72]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d105      	bne.n	8005026 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]
  }
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40010400 	.word	0x40010400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800
 8005054:	40001800 	.word	0x40001800
 8005058:	40001c00 	.word	0x40001c00
 800505c:	40002000 	.word	0x40002000

08005060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 0201 	bic.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 0302 	bic.w	r3, r3, #2
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a20      	ldr	r2, [pc, #128]	; (8005138 <TIM_OC1_SetConfig+0xd8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC1_SetConfig+0x64>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <TIM_OC1_SetConfig+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0308 	bic.w	r3, r3, #8
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <TIM_OC1_SetConfig+0xd8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d003      	beq.n	80050ee <TIM_OC1_SetConfig+0x8e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <TIM_OC1_SetConfig+0xdc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d111      	bne.n	8005112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400

08005140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0210 	bic.w	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a22      	ldr	r2, [pc, #136]	; (8005224 <TIM_OC2_SetConfig+0xe4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0x68>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <TIM_OC2_SetConfig+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10d      	bne.n	80051c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a17      	ldr	r2, [pc, #92]	; (8005224 <TIM_OC2_SetConfig+0xe4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC2_SetConfig+0x94>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a16      	ldr	r2, [pc, #88]	; (8005228 <TIM_OC2_SetConfig+0xe8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d113      	bne.n	80051fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400

0800522c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a21      	ldr	r2, [pc, #132]	; (800530c <TIM_OC3_SetConfig+0xe0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC3_SetConfig+0x66>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10d      	bne.n	80052ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a16      	ldr	r2, [pc, #88]	; (800530c <TIM_OC3_SetConfig+0xe0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_OC3_SetConfig+0x92>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000
 8005310:	40010400 	.word	0x40010400

08005314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	031b      	lsls	r3, r3, #12
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <TIM_OC4_SetConfig+0xa4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC4_SetConfig+0x68>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a11      	ldr	r2, [pc, #68]	; (80053bc <TIM_OC4_SetConfig+0xa8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d109      	bne.n	8005390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	019b      	lsls	r3, r3, #6
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 030a 	bic.w	r3, r3, #10
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f023 0210 	bic.w	r2, r3, #16
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800545a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	f043 0307 	orr.w	r3, r3, #7
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2201      	movs	r2, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e05a      	b.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a21      	ldr	r2, [pc, #132]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d01d      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10c      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40001800 	.word	0x40001800

08005638 <__itoa>:
 8005638:	1e93      	subs	r3, r2, #2
 800563a:	2b22      	cmp	r3, #34	; 0x22
 800563c:	b510      	push	{r4, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	d904      	bls.n	800564c <__itoa+0x14>
 8005642:	2300      	movs	r3, #0
 8005644:	700b      	strb	r3, [r1, #0]
 8005646:	461c      	mov	r4, r3
 8005648:	4620      	mov	r0, r4
 800564a:	bd10      	pop	{r4, pc}
 800564c:	2a0a      	cmp	r2, #10
 800564e:	d109      	bne.n	8005664 <__itoa+0x2c>
 8005650:	2800      	cmp	r0, #0
 8005652:	da07      	bge.n	8005664 <__itoa+0x2c>
 8005654:	232d      	movs	r3, #45	; 0x2d
 8005656:	700b      	strb	r3, [r1, #0]
 8005658:	4240      	negs	r0, r0
 800565a:	2101      	movs	r1, #1
 800565c:	4421      	add	r1, r4
 800565e:	f000 f805 	bl	800566c <__utoa>
 8005662:	e7f1      	b.n	8005648 <__itoa+0x10>
 8005664:	2100      	movs	r1, #0
 8005666:	e7f9      	b.n	800565c <__itoa+0x24>

08005668 <itoa>:
 8005668:	f7ff bfe6 	b.w	8005638 <__itoa>

0800566c <__utoa>:
 800566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566e:	4c1f      	ldr	r4, [pc, #124]	; (80056ec <__utoa+0x80>)
 8005670:	b08b      	sub	sp, #44	; 0x2c
 8005672:	4605      	mov	r5, r0
 8005674:	460b      	mov	r3, r1
 8005676:	466e      	mov	r6, sp
 8005678:	f104 0c20 	add.w	ip, r4, #32
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	6861      	ldr	r1, [r4, #4]
 8005680:	4637      	mov	r7, r6
 8005682:	c703      	stmia	r7!, {r0, r1}
 8005684:	3408      	adds	r4, #8
 8005686:	4564      	cmp	r4, ip
 8005688:	463e      	mov	r6, r7
 800568a:	d1f7      	bne.n	800567c <__utoa+0x10>
 800568c:	7921      	ldrb	r1, [r4, #4]
 800568e:	7139      	strb	r1, [r7, #4]
 8005690:	1e91      	subs	r1, r2, #2
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	6038      	str	r0, [r7, #0]
 8005696:	2922      	cmp	r1, #34	; 0x22
 8005698:	f04f 0100 	mov.w	r1, #0
 800569c:	d904      	bls.n	80056a8 <__utoa+0x3c>
 800569e:	7019      	strb	r1, [r3, #0]
 80056a0:	460b      	mov	r3, r1
 80056a2:	4618      	mov	r0, r3
 80056a4:	b00b      	add	sp, #44	; 0x2c
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a8:	1e58      	subs	r0, r3, #1
 80056aa:	4684      	mov	ip, r0
 80056ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80056b0:	fb02 5617 	mls	r6, r2, r7, r5
 80056b4:	3628      	adds	r6, #40	; 0x28
 80056b6:	446e      	add	r6, sp
 80056b8:	460c      	mov	r4, r1
 80056ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80056be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80056c2:	462e      	mov	r6, r5
 80056c4:	42b2      	cmp	r2, r6
 80056c6:	f101 0101 	add.w	r1, r1, #1
 80056ca:	463d      	mov	r5, r7
 80056cc:	d9ee      	bls.n	80056ac <__utoa+0x40>
 80056ce:	2200      	movs	r2, #0
 80056d0:	545a      	strb	r2, [r3, r1]
 80056d2:	1919      	adds	r1, r3, r4
 80056d4:	1aa5      	subs	r5, r4, r2
 80056d6:	42aa      	cmp	r2, r5
 80056d8:	dae3      	bge.n	80056a2 <__utoa+0x36>
 80056da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80056de:	780e      	ldrb	r6, [r1, #0]
 80056e0:	7006      	strb	r6, [r0, #0]
 80056e2:	3201      	adds	r2, #1
 80056e4:	f801 5901 	strb.w	r5, [r1], #-1
 80056e8:	e7f4      	b.n	80056d4 <__utoa+0x68>
 80056ea:	bf00      	nop
 80056ec:	080057d4 	.word	0x080057d4

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4d0d      	ldr	r5, [pc, #52]	; (8005738 <__libc_init_array+0x38>)
 8005704:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005706:	1b64      	subs	r4, r4, r5
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	2600      	movs	r6, #0
 800570c:	42a6      	cmp	r6, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	4d0b      	ldr	r5, [pc, #44]	; (8005740 <__libc_init_array+0x40>)
 8005712:	4c0c      	ldr	r4, [pc, #48]	; (8005744 <__libc_init_array+0x44>)
 8005714:	f000 f818 	bl	8005748 <_init>
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	2600      	movs	r6, #0
 800571e:	42a6      	cmp	r6, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f855 3b04 	ldr.w	r3, [r5], #4
 8005728:	4798      	blx	r3
 800572a:	3601      	adds	r6, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005732:	4798      	blx	r3
 8005734:	3601      	adds	r6, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08005804 	.word	0x08005804
 800573c:	08005804 	.word	0x08005804
 8005740:	08005804 	.word	0x08005804
 8005744:	08005808 	.word	0x08005808

08005748 <_init>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr

08005754 <_fini>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr
